package com.szzt.emvtest.EMVSDK;

import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDK_EMVBASE_AID_STRUCT extends Structure<SDK_EMVBASE_AID_STRUCT, SDK_EMVBASE_AID_STRUCT.ByValue, SDK_EMVBASE_AID_STRUCT.ByReference > {
    public byte AidLen;
    /**
     * 5-16<br>
     * C type : unsigned char[16]
     */
    public byte[] Aid = new byte[16];
    /** Application Selection Indicator.0-needn't match exactly(partial match up to the length);1-match exactly */
    public byte Asi;
    /** C type : unsigned char[2] */
    public byte[] AppVerNum = new byte[2];
    /** C type : unsigned char[5] */
    public byte[] TacDefault = new byte[5];
    /** C type : unsigned char[5] */
    public byte[] TacOnline = new byte[5];
    /** C type : unsigned char[5] */
    public byte[] TacDecline = new byte[5];
    /** C type : unsigned char[4] */
    public byte[] FloorLimit = new byte[4];
    /** C type : unsigned char[4] */
    public byte[] Threshold = new byte[4];
    public byte MaxTargetPercent;
    public byte TargetPercent;
    public byte TermDDOLLen;
    /** C type : unsigned char[128] */
    public byte[] TermDDOL = new byte[128];
    public byte TermPinCap;
    /**
     * for contact PBOC use only - low value payment - electronic cash<br>
     * C type : unsigned char[6]
     */
    public byte[] ectranslimit = new byte[6];
    /** C type : unsigned char[6] */
    public byte[] cl_cvmlimit = new byte[6];
    /** C type : unsigned char[6] */
    public byte[] cl_translimit = new byte[6];
    /** C type : unsigned char[6] */
    public byte[] cl_offlinelimit = new byte[6];
    /** if for all transcation type set transvaule 0xFF, otherwise set transvaule with tag9C */
    public byte transvaule;
    /** if contactorcontactless is 0,for both contact and contactless; if is 1,for contact only; if is 2,for contactless only */
    public byte contactorcontactless;
    public SDK_EMVBASE_AID_STRUCT() {
        super();
    }
    protected List<? > getFieldOrder() {
        return Arrays.asList("AidLen", "Aid", "Asi", "AppVerNum", "TacDefault", "TacOnline", "TacDecline", "FloorLimit", "Threshold", "MaxTargetPercent", "TargetPercent", "TermDDOLLen", "TermDDOL", "TermPinCap", "ectranslimit", "cl_cvmlimit", "cl_translimit", "cl_offlinelimit", "transvaule", "contactorcontactless");
    }
    protected ByReference newByReference() { return new ByReference(); }
    protected ByValue newByValue() { return new ByValue(); }
    protected SDK_EMVBASE_AID_STRUCT newInstance() { return new SDK_EMVBASE_AID_STRUCT(); }
    public static SDK_EMVBASE_AID_STRUCT[] newArray(int arrayLength) {
        return Structure.newArray(SDK_EMVBASE_AID_STRUCT.class, arrayLength);
    }
    public static class ByReference extends SDK_EMVBASE_AID_STRUCT implements Structure.ByReference {

    };
    public static class ByValue extends SDK_EMVBASE_AID_STRUCT implements Structure.ByValue {

    };
}

