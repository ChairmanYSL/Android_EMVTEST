package com.szzt.emvtest.EMVSDK;

import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDK_RANDOM_STRUCT extends Structure<SDK_RANDOM_STRUCT, SDK_RANDOM_STRUCT.ByValue, SDK_RANDOM_STRUCT.ByReference > {
    public int bytesNeeded;
    /** C type : unsigned char[16] */
    public byte[] state = new byte[16];
    public int outputAvailable;
    /** C type : unsigned char[16] */
    public byte[] output = new byte[16];
    public SDK_RANDOM_STRUCT() {
        super();
    }
    protected List<String > getFieldOrder() {
        return Arrays.asList("bytesNeeded", "state", "outputAvailable", "output");
    }
    /**
     * @param state C type : unsigned char[16]<br>
     * @param output C type : unsigned char[16]
     */
    public SDK_RANDOM_STRUCT(int bytesNeeded, byte state[], int outputAvailable, byte output[]) {
        super();
        this.bytesNeeded = bytesNeeded;
        if ((state.length != this.state.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.state = state;
        this.outputAvailable = outputAvailable;
        if ((output.length != this.output.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.output = output;
    }
    protected ByReference newByReference() { return new ByReference(); }
    protected ByValue newByValue() { return new ByValue(); }
    protected SDK_RANDOM_STRUCT newInstance() { return new SDK_RANDOM_STRUCT(); }
    public static SDK_RANDOM_STRUCT[] newArray(int arrayLength) {
        return Structure.newArray(SDK_RANDOM_STRUCT.class, arrayLength);
    }
    public static class ByReference extends SDK_RANDOM_STRUCT implements Structure.ByReference {

    };
    public static class ByValue extends SDK_RANDOM_STRUCT implements Structure.ByValue {

    };
}


