package com.szzt.emvtest.EMVSDK;

import com.ochafik.lang.jnaerator.runtime.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SDK_RSA_PUBLIC_KEY extends Structure<SDK_RSA_PUBLIC_KEY, SDK_RSA_PUBLIC_KEY.ByValue, SDK_RSA_PUBLIC_KEY.ByReference > {
    /** length in bits of modulus */
    public int bits;
    /**
     * modulus<br>
     * C type : unsigned char[256ul]
     */
    public byte[] modulus = new byte[256];
    /**
     * public exponent<br>
     * C type : unsigned char[256ul]
     */
    public byte[] exponent = new byte[256];
    public SDK_RSA_PUBLIC_KEY() {
        super();
    }
    protected List<String > getFieldOrder() {
        return Arrays.asList("bits", "modulus", "exponent");
    }
    /**
     * @param bits length in bits of modulus<br>
     * @param modulus modulus<br>
     * C type : unsigned char[256ul]<br>
     * @param exponent public exponent<br>
     * C type : unsigned char[256ul]
     */
    public SDK_RSA_PUBLIC_KEY(int bits, byte modulus[], byte exponent[]) {
        super();
        this.bits = bits;
        if ((modulus.length != this.modulus.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.modulus = modulus;
        if ((exponent.length != this.exponent.length))
            throw new IllegalArgumentException("Wrong array size !");
        this.exponent = exponent;
    }
    protected ByReference newByReference() { return new ByReference(); }
    protected ByValue newByValue() { return new ByValue(); }
    protected SDK_RSA_PUBLIC_KEY newInstance() { return new SDK_RSA_PUBLIC_KEY(); }
    public static SDK_RSA_PUBLIC_KEY[] newArray(int arrayLength) {
        return Structure.newArray(SDK_RSA_PUBLIC_KEY.class, arrayLength);
    }
    public static class ByReference extends SDK_RSA_PUBLIC_KEY implements Structure.ByReference {

    };
    public static class ByValue extends SDK_RSA_PUBLIC_KEY implements Structure.ByValue {

    };
}

